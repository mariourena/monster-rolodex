{"version":3,"sources":["components/card/card.jsx","constants/urls.js","components/card-list/card-list.jsx","components/search/search.jsx","App.js","constants/strings.js","serviceWorker.js","index.js"],"names":["Card","id","monster","className","alt","src","name","email","CardList","props","monsters","map","m","key","Search","type","placeholder","onChange","updateSearch","value","text","App","searchText","target","setState","filterMonstersBySearch","RegExp","state","test","this","filter","fetch","then","response","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAYeA,G,MARF,SAAC,GAAD,ICHeC,EDGbC,EAAF,EAAEA,QAAF,OACT,yBAAKC,UAAU,QACX,yBAAKC,IAAI,UAAUC,KCLCJ,EDKiBC,EAAQD,GCLvB,+BAA4BA,EAA5B,6BDMtB,4BAAKC,EAAQI,MACb,2BAAIJ,EAAQK,UEELC,G,MANE,SAAAC,GAAK,OAClB,yBAAKN,UAAU,aACVM,EAAMC,SAASC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAEX,GAAIC,QAASU,UCC5CE,G,MAJA,SAAAL,GAAK,OAChB,2BAAON,UAAU,SAASY,KAAK,SAASC,YAAaP,EAAMO,YAAaC,SAAUR,EAAMS,aAAcC,MAAOV,EAAMW,SC6CxGC,G,wDAzCb,aAAe,IAAD,8BACZ,gBAOFH,aAAe,YAAe,IACtBI,EADqB,EAAZC,OACWJ,MAC1B,EAAKK,SAAS,CAACF,gBAVH,EAadG,uBAAyB,SAAAb,GAAC,OAAK,IAAIc,OAAO,EAAKC,MAAML,WAAY,MAAOM,KAAKhB,EAAEN,OAX7E,EAAKqB,MAAQ,CACXjB,SAAU,GACVY,WAAY,IAJF,E,qDAeJ,IAAD,EAE0BO,KAAKF,MAA9BjB,EAFD,EAECA,SAAUY,EAFX,EAEWA,WAElB,OACE,yBAAKnB,UAAU,OACb,4BC7BgB,mBD8BhB,kBAAC,EAAD,CACEe,aAAcW,KAAKX,aACnBE,KAAME,EACNN,YChCuB,uBDiCzB,kBAAC,EAAD,CAAUN,SAAUA,EAASoB,OAAOD,KAAKJ,6B,0CAK1B,IAAD,OAClBM,MHxC0B,8CGyCvBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GACJ,EAAKc,SAAS,CAACd,oB,GApCLyB,cEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82c99f96.chunk.js","sourcesContent":["import React from 'react';\nimport { monsterImage } from '../../constants/urls';\nimport './styles.css';\n\nconst Card = ({monster}) => (\n    <div className=\"card\">\n        <img alt=\"Monster\" src={monsterImage(monster.id)}/>\n        <h2>{monster.name}</h2>\n        <p>{monster.email}</p>\n    </div>\n)\n\nexport default Card;","export const jsonPlaceholer = 'https://jsonplaceholder.typicode.com/users';\nexport const monsterImage = id => `https://robohash.org/${id}?set=set2&size=180x180`;","import React from 'react';\nimport Card from '../card/card';\nimport './styles.css';\n\nconst CardList = props => (\n    <div className=\"card-list\">\n        {props.monsters.map(m => <Card key={m.id} monster={m}/>)}\n    </div>\n)\n\nexport default CardList;","import React, { Component } from 'react';\nimport './styles.css';\n\nconst Search = props => (\n    <input className=\"search\" type=\"search\" placeholder={props.placeholder} onChange={props.updateSearch} value={props.text} />\n);\n\nexport default Search;","import React, { Component } from 'react';\nimport { jsonPlaceholer } from './constants/urls';\nimport { appTitle, searchPlaceholder } from './constants/strings';\nimport CardList from './components/card-list/card-list';\nimport Search from './components/search/search';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchText: '',\n    }\n  }\n\n  updateSearch = ({target}) => {\n    const searchText = target.value;\n    this.setState({searchText});\n  }\n\n  filterMonstersBySearch = m => (new RegExp(this.state.searchText, 'gi')).test(m.name);\n\n  render() {\n\n    const { monsters, searchText } = this.state;\n      \n    return(\n      <div className=\"App\">\n        <h1>{appTitle}</h1>\n        <Search \n          updateSearch={this.updateSearch} \n          text={searchText} \n          placeholder={searchPlaceholder} />\n        <CardList monsters={monsters.filter(this.filterMonstersBySearch)} />\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    fetch(jsonPlaceholer)\n      .then(response => response.json())\n      .then(monsters => {\n        this.setState({monsters});\n      });\n  }\n\n}\n\nexport default App;\n","export const appTitle = \"Monster Rolodex\";\nexport const searchPlaceholder = \"Search Monsters...\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}